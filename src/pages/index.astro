---

import Layout from '../layouts/Layout.astro';
import TestEntry from '../components/TestEntry.astro'


import {getCodeBlockContent, getTests} from '../content/utils'

//const jsBeautify = require('js-beautify').js_beautify;


const testRules = await getTests()

/** */
const duplicateArr = (arr, times) =>
    Array(times)
        .fill([...arr])
        .reduce((a, b) => a.concat(b));

const testRulesTemp = duplicateArr(testRules, 5)

/***/

console.log(testRules)






//const code  = testRules[0].body.match(JSCodeBlockRegex);


console.log(getCodeBlockContent(testRules[0].body));

/* */
const title = `Script Gen`;
---

<Layout title={title}>
    <main class="h-screen w-full">


        <div class="content">
            <div class="header flex"> 

                    <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 64 64" fill="none">
                        <circle cx="33" cy="5" r="3" stroke="#5639C6" stroke-width="4"/>
                        <circle cx="47" cy="11" r="5" stroke="#715DF2" stroke-width="4"/>
                        <circle cx="56" cy="26" r="6" stroke="#8B7AF4" stroke-width="4"/>
                        <circle cx="53" cy="45" r="7" stroke="#A599F7" stroke-width="4"/>
                        <circle cx="32" cy="54" r="8" stroke="#A599F7" stroke-width="4"/>
                        <circle cx="11" cy="40" r="9" stroke="#C0B7F9" stroke-width="4"/>
                        <circle cx="16" cy="15" r="10" stroke="#DBD6FC" stroke-width="4"/>
                        </svg>
                <p class="max-w-lg text-3xl font-semibold leading-loose text-gray-900 dark:text-white">UIB Diagnostic Script Generator.</p>

   

                

            </div>
            <div class="body"> 
                <div class="wrapper-container w-full">
                    <div class="left-container">
                        <h3 class="mb-5 text-lg font-medium text-gray-900 dark:text-white"> Test Suite:</h3>
<div class="suite-container">

    <ul class="grid w-full gap-6 md:grid-cols-2">
        <li>
            <input type="checkbox" id="mcp-suite-option" value="" class="hidden peer" required="">
            <label for="mcp-suite-option" class="inline-flex items-center justify-between w-full p-5 text-gray-500 bg-white border-2 border-gray-200 rounded-lg cursor-pointer dark:hover:text-gray-300 dark:border-gray-700 peer-checked:border-blue-600 hover:text-gray-600 dark:peer-checked:text-gray-300 peer-checked:text-gray-600 hover:bg-gray-50 dark:text-gray-400 dark:bg-gray-800 dark:hover:bg-gray-700">                           
                <div class="block">
                    <svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 22 21">
                        <path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M7.24 7.194a24.16 24.16 0 0 1 3.72-3.062m0 0c3.443-2.277 6.732-2.969 8.24-1.46 2.054 2.053.03 7.407-4.522 11.959-4.552 4.551-9.906 6.576-11.96 4.522C1.223 17.658 1.89 14.412 4.121 11m6.838-6.868c-3.443-2.277-6.732-2.969-8.24-1.46-2.054 2.053-.03 7.407 4.522 11.959m3.718-10.499a24.16 24.16 0 0 1 3.719 3.062M17.798 11c2.23 3.412 2.898 6.658 1.402 8.153-1.502 1.503-4.771.822-8.2-1.433m1-6.808a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path>
                    </svg>
                    <div class="w-full text-lg font-semibold">Macroponent</div>
                    <div class="w-full text-sm">Valiidations regarding macropoent integrity.</div>
                </div>
            </label>
        </li>
        <li>
            <input type="checkbox" id="experience-suite-option" value="" class="hidden peer" required="">
            <label for="experience-suite-option" class="inline-flex items-center justify-between w-full p-5 text-gray-500 bg-white border-2 border-gray-200 rounded-lg cursor-pointer dark:hover:text-gray-300 dark:border-gray-700 peer-checked:border-blue-600 hover:text-gray-600 dark:peer-checked:text-gray-300 peer-checked:text-gray-600 hover:bg-gray-50 dark:text-gray-400 dark:bg-gray-800 dark:hover:bg-gray-700">                           
                <div class="block">
                    <svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 22 21">
                        <path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M7.24 7.194a24.16 24.16 0 0 1 3.72-3.062m0 0c3.443-2.277 6.732-2.969 8.24-1.46 2.054 2.053.03 7.407-4.522 11.959-4.552 4.551-9.906 6.576-11.96 4.522C1.223 17.658 1.89 14.412 4.121 11m6.838-6.868c-3.443-2.277-6.732-2.969-8.24-1.46-2.054 2.053-.03 7.407 4.522 11.959m3.718-10.499a24.16 24.16 0 0 1 3.719 3.062M17.798 11c2.23 3.412 2.898 6.658 1.402 8.153-1.502 1.503-4.771.822-8.2-1.433m1-6.808a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path>
                    </svg>
                    <div class="w-full text-lg font-semibold">Experience</div>
                    <div class="w-full text-sm">Valiidations regarding macropoent integrity.</div>
                </div>
            </label>
        </li>
    
    </ul>
</div>
                    </div>
                    <div class="right-container">
                        { testRulesTemp.map((test) => {
                            return (
                                <TestEntry
                                 id={test.data.test_id}
                                 title={test.data.title}
                                 description={test.data.description}
                                 tags={test.data.tags}
                                 author={test.data.author}
                                 version = {`${test.data.last_valid_store_version} / ${test.data.last_valid_platform_version}`}/>
                                )
                            })
                        }
                    </div>
                    
                </div>

            </div>
  
                <div class="actions dark:bg-slate-800">
					
                    <!--button type="button" class="text-gray-900 hover:text-white border border-gray-800 hover:bg-gray-900 focus:ring-4 focus:outline-none focus:ring-gray-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center me-2 mb-2 dark:border-gray-600 dark:text-gray-400 dark:hover:text-white dark:hover:bg-gray-600 dark:focus:ring-gray-800">Reset</button-->
                        
                    <button id="generate-script" type="button" data-drawer-target="bottom-drawer" data-drawer-show="bottom-drawer"  data-drawer-placement="bottom" class="text-green-700 hover:text-white border border-green-700 hover:bg-green-800 focus:ring-4 focus:outline-none focus:ring-green-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center me-2 mb-2 dark:border-green-500 dark:text-green-500 dark:hover:text-white dark:hover:bg-green-600 dark:focus:ring-green-800">Generate Validation Script</button>
                
                </div>
            </div>

        


        
        
    </main>
 
    
</Layout>

<script define:vars={{testRules}}>

const generateBtn = document.querySelector('#generate-script');
const resultDrawer = document.querySelector('#bottom-drawer');


generateBtn.addEventListener('click', (e)=> {
    const testListPane = document.querySelector('.right-container');
    const selections = Array.from(testListPane.querySelectorAll("input"));
    resultDrawer.classList.toggle('hidden');
    console.log(selections, testRules, resultDrawer)
})



</script>

<style>

.header{
    padding: 1rem;
}

.content {
            display: grid;
            grid-template-columns: 1fr;
            grid-template-rows: 1fr 8fr 1fr;
            grid-column-gap: 0px;
            grid-row-gap: 0px;
            max-height: 100vh;
            }
            
            .header { grid-area: 1 / 1 / 2 / 2; }
            .body { grid-area: 2 / 1 / 3 / 2;     overflow: scroll; }
            .actions { grid-area: 3 / 1 / 4 / 2; }

    .wrapper-container{
        display: grid;
grid-template-columns: 1fr 1fr;
grid-template-rows: auto;
grid-column-gap: 1px;

    }

    .left-container{
       grid-area: 1 / 1 / 2 / 2; 
       padding: 1rem;
    }

    .suite-container{
        
    }

    .right-container{
        grid-area: 1 / 2 / 2 / 3;
        max-width: 100%;
    overflow-y: scroll;
    display: flex;
    flex-direction: column;
    gap: 5px;
    justify-content: flex-start;
    padding: 1rem;
    }

    .actions {     display: flex;
    /* align-content: center; */
    align-items: center;
	gap: 6rem;
    justify-content:center; }

</style>